
struct Sphere
{
	vec4 centerAndRadius, color;
};

struct Triangle
{
	vec4 p[3];
	vec4 e[3];
	vec4 color;
	vec4 N;								//Normal is vec3
	vec4 D_oneOverTwiceArea;			//D is float, oneOverTwiceArea is float, 0, 0
};

layout(local_size_x=32,local_size_y=1,local_size_z=1) in;
layout(binding=0,rgba8) uniform image2DArray img;
layout(std430, binding = 0) buffer S 
{
	Sphere spheres[];
};

layout(std430, binding = 1) buffer T
{
	Triangle triangles[];
};

void traceSpheres(in vec3 eyePos, in vec3 rayDir, inout vec3 ip, inout vec3 N,
	inout vec3 color, inout float closestT, inout bool inter)
{
    int ci=-1;

	//go through the list of spheres in the scene 
	//and determine if the viewer is intersecting the object
    for(int i=0;i<spheres.length();++i){

		//q = rayStart - sphereCenter
		//q * q - r^2 + 2(q * rayDir)t + t^2(rayDir * rayDir) = 0
		vec3 q = eyePos - spheres[i].centerAndRadius.xyz;
		float radius = spheres[i].centerAndRadius.w;
		float A = dot(rayDir, rayDir);
		float B = 2 * dot(q, rayDir);
		float C = dot(q, q) - (radius * radius);
		float discriminant = (B * B) - (4 * A * C);

		if (discriminant >= 0)	//if the discriminant is less than zero, there is no intersection
		{
			float sqrtDiscrim = sqrt(discriminant);
			float denom = 2 * A;

			//use Quadratic Formula to check if a spheres t's are closer and update closestT if they are
			float t1 = (-B + sqrtDiscrim) / denom;
			float t2 = (-B - sqrtDiscrim) / denom;

			if (t1 < 0 && t2 >= 0)			//t2 is closer than ClosestT
			{
				if (closestT > t2)
				{
					closestT = t2;
					ci = i;
				}
			}
			else if (t1 >= 0 && t2 < 0)		//t1 is closer than ClosestT
			{
				if (closestT > t1)
				{
					closestT = t1;
					ci = i;
				}
			}
			else if (t1 >= 0 && t2 >= 0)	//one of the t's is closer than ClosestT
			{
				float minT = min(t1, t2);
				if (closestT > minT)
				{
					closestT = minT;
					ci = i;
				}
			}
		}
    }
    
    if( ci == -1 ){
		if (!inter)			//already true for another object
			inter = false;
        return;
    }
	else
	{
		ip = eyePos + closestT * rayDir;						//intersection point
		N = normalize(ip - spheres[ci].centerAndRadius.xyz);	//Normal at intersection point
		color = spheres[ci].color.xyz;
		inter = true;
	}
};

void traceTriangles(vec3 eyePos, vec3 rayDir, vec3 ip, vec3 N, 
            vec3 color, inout float closestT, inout bool inter)
{
	int ti = -1;		//triangle intersection

	for(int i = 0; i < triangles.length(); ++i){
		vec3 p = triangles[i].p[0].xyz;
		vec3 q = triangles[i].p[1].xyz;
		vec3 r = triangles[i].p[2].xyz;

		vec3 N = cross((q-r), (r-p));	//Triangles Normal
		float denominator = dot(N, rayDir);
			
		//check for ray intersection with triangle
		//No intersection if denominator is zero
		if (denominator != 0)				
		{
			float D = -dot(N, p);			//Distance of plane from origin
			float t = -(D + dot(N, eyePos)) / denominator;
			if (t >= 0 && closestT > t)
			{
				vec3 currentIP = eyePos + (t * rayDir); //intersection point
				float sumQi = 0;
				for (int j = 0; j < triangles[i].e.length(); j++)	//make sure ip is intersecting the triangle
				{
					vec3 qi = cross(triangles[i].e[j].xyz, (currentIP - triangles[i].p[j].xyz));
					sumQi += qi[0]+qi[1]+qi[2];
				}

				float A = sumQi * triangles[i].D_oneOverTwiceArea.y;
				if (A <= 1.001)
				{
					ip = currentIP;
					closestT = t;
					ti = i;
				}
			}
		}
    }

	if (ti == -1) {		//no intersection
		if(!inter)			//already true for another object
			inter = false;
		return;
	}
	else
	{
		N = triangles[ti].N.xyz;
		color = triangles[ti].color.xyz;
		inter = true;
	}
};

bool traceRay(vec3 s, vec3 v, inout vec3 ip, inout vec3 N, inout vec3 color)
{
    float closestT = 6.55e4;
    bool inter = false;
	traceSpheres(s, v, ip, N, color, closestT, inter);
	traceTriangles(s, v, ip, N, color, closestT, inter);

    return inter;
};

void main(){
	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 picSize = imageSize(img).xy;
	float d = 1.0 / 0.69974612;			//denom = tan(35 degrees) = field of viewfloat
	float dy = 2.0/(picSize.y-1);
	float dx = 2.0/(picSize.x-1);
	float y = -1.0 + pixelCoord.y * dy;
	float x = -1.0 + pixelCoord.x * dx;
	vec3 rayDir = x*cameraRight + y*cameraUp + d*cameraLook;
	vec3 ip = rayDir.xyz, N = ip.xyz, color = vec3(0,0,0);

	traceRay(eyePos, rayDir, ip, N, color);
	imageStore(img, ivec3(pixelCoord,0), vec4(color,1.0));
}
