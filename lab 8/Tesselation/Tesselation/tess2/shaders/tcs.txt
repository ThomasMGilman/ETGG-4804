layout(vertices=3) out;

in vec3 v_position[];
in vec3 v_normal[];
in vec2 v_texCoord[];

out vec3 tcs_position[];
out vec3 tcs_normal[];
out vec2 tcs_texCoord[];

void main(){
/////////////////////////////////////////////////////////////////////////////////////IsolineCode for shafts
	//gl_TessLevelOuter[0] = 16;	//Shafts per triangle
	//gl_TessLevelOuter[1] = 8;	//8 segments per shaft
	//tcs_position[gl_InvocationID] = (v_position[0] + v_position[1] + v_position[2]) / 3.0;	//tcs_normal[gl_InvocationID] = (v_normal[0] + v_normal[1] + v_normal[2]) / 3.0;

/////////////////////////////////////////////////////////////////////////////////////Triangle PatchCode	gl_TessLevelOuter[0] = tessFactor;
	gl_TessLevelOuter[1] = tessFactor;
	gl_TessLevelOuter[2] = tessFactor;
	gl_TessLevelInner[0] = tessFactor;
	tcs_position[gl_InvocationID]	= (v_position[0] + v_position[1] + v_position[2]) / 3.0;		//v_position[gl_InvocationID];
	tcs_normal[gl_InvocationID]		= (v_normal[0] + v_normal[1] + v_normal[2]) / 3.0;				//v_normal[gl_InvocationID];
	tcs_texCoord[gl_InvocationID]	= (v_texCoord[0] + v_texCoord[1] + v_texCoord[2]) / 3.0;		//v_texCoord[gl_InvocationID];

}