
struct Ray
{
	vec4 start, dir, coords_percentageRemaining, accumulatedColor;
};

struct Sphere
{
	vec4 center_radius;					//center is a vec3, radius is a float
	vec4 color;							//R,G,B,A
	vec4 reflection;					//reflection is a float, followed by padding
};

struct Triangle
{
	vec4 p[3];
	vec4 e[3];
	vec4 color;
	vec4 N_reflection;					//Normal is vec3, reflection is a float
	vec4 D_oneOverTwiceArea;			//D is float, oneOverTwiceArea is float, 0, 0
};

layout(local_size_x=32,local_size_y=1,local_size_z=1) in;
layout(binding=0,rgba8) uniform image2DArray img;
layout(std430, binding = 0) buffer S 
{
	Sphere spheres[];
};

layout(std430, binding = 1) buffer T
{
	Triangle triangles[];
};

layout(std430, binding = 2, row_major) buffer InData2
{
	int currentRayCount;
	int currentArraySize;
	Ray currentRays[];
};

layout(std430, binding = 3, row_major) buffer InData3
{
	int nextRayCount;
	int nextPassArraySize;
	Ray nextPassRays[];
};

float mag(in vec3 qI)
{
	return sqrt(qI[0] * qI[0] + qI[1] * qI[1] + qI[2] * qI[2]);
}

void traceSpheres(in vec3 eyePos, in vec3 rayDir, inout vec3 ip, inout vec3 N,
	inout vec3 color, inout float closestT, inout bool inter, inout float alpha, inout float refl)
{
    int ci=-1;

	//go through the list of spheres in the scene 
	//and determine if the viewer is intersecting the object
    for(int i=0;i<spheres.length();++i){

		//q = rayStart - sphereCenter
		//q * q - r^2 + 2(q * rayDir)t + t^2(rayDir * rayDir) = 0
		Sphere s = spheres[i];
		vec3 q = eyePos - s.center_radius.xyz;
		float radius = s.center_radius.w;
		float A = dot(rayDir, rayDir);
		float B = 2 * dot(q, rayDir);
		float C = dot(q, q) - (radius * radius);
		float discriminant = (B * B) - (4 * A * C);

		if (discriminant >= 0)	//if the discriminant is less than zero, there is no intersection
		{
			float sqrtDiscrim = sqrt(discriminant);
			float denom = 2 * A;

			//use Quadratic Formula to check if a spheres t's are closer and update closestT if they are
			float t1 = (-B + sqrtDiscrim) / denom;
			float t2 = (-B - sqrtDiscrim) / denom;

			if (t1 < 0 && t2 >= 0)			//t2 is closer than ClosestT
			{
				if (closestT > t2)
				{
					closestT = t2;
					ci = i;
				}
			}
			else if (t1 >= 0 && t2 < 0)		//t1 is closer than ClosestT
			{
				if (closestT > t1)
				{
					closestT = t1;
					ci = i;
				}
			}
			else if (t1 >= 0 && t2 >= 0)	//one of the t's is closer than ClosestT
			{
				float minT = min(t1, t2);
				if (closestT > minT)
				{
					closestT = minT;
					ci = i;
				}
			}
		}
    }
    
    if( ci == -1 ){
		if (!inter)			//already true for another object
			inter = false;
        return;
    }
	else
	{
		ip = eyePos + closestT * rayDir;						//intersection point
		N = normalize(ip - spheres[ci].center_radius.xyz);		//Normal at intersection point
		color = spheres[ci].color.xyz;
		alpha = spheres[ci].color.w;
		refl  = spheres[ci].reflection.x;						//y,z,w are padding
		inter = true;
	}
};

void traceTriangles(vec3 eyePos, vec3 rayDir, inout vec3 ip, inout vec3 N, 
           inout vec3 color, inout float closestT, inout bool inter, inout float alpha, inout float refl)
{
	int ti = -1;		//triangle intersection

	for(int i = 0; i < triangles.length(); ++i){
		Triangle tmp = triangles[i];
		vec3 p = tmp.p[0].xyz;
		vec3 q = tmp.p[1].xyz;
		vec3 r = tmp.p[2].xyz;

		vec3 N = cross((q-r), (r-p));	//Triangles Normal
		float denominator = dot(N, rayDir);
			
		//check for ray intersection with triangle
		//No intersection if denominator is zero
		if (denominator != 0)				
		{
			float D = -dot(N, p);			//Distance of plane from origin
			float t = -(D + dot(N, eyePos)) / denominator;
			if (t >= 0 && closestT > t)
			{
				vec3 currentIP = eyePos + (t * rayDir); //intersection point
				float sumQi = 0;
				for (int j = 0; j < tmp.e.length(); j++)	//make sure ip is intersecting the triangle
				{
					vec3 qi = cross(tmp.e[j].xyz, (currentIP - triangles[i].p[j].xyz));
					sumQi += mag(qi);
				}

				float A = sumQi * tmp.D_oneOverTwiceArea.y;
				if (A <= 1.001)
				{
					ip = currentIP;
					closestT = t;
					ti = i;
				}
			}
		}
    }

	if (ti == -1) {		//no intersection
		if(!inter)			//already true for another object
			inter = false;
		return;
	}
	else
	{
		N = triangles[ti].N_reflection.xyz;
		color = triangles[ti].color.xyz;
		alpha = triangles[ti].color.w;
		refl  = triangles[ti].N_reflection.w;
		inter = true;
	}
};

bool traceRay(vec3 s, vec3 v, inout vec3 ip, inout vec3 N, inout vec3 color, inout float alpha, inout float refl)
{
    float closestT = 6.55e4;
    bool inter = false;
	traceSpheres(s, v, ip, N, color, closestT, inter, alpha, refl);
	traceTriangles(s, v, ip, N, color, closestT, inter, alpha, refl);

    return inter;
};

vec3 reflect(in vec3 Light, in vec3 N)
{
	float dp = dot(Light, N);
	vec3 c = dp * N;
	return c + c - Light;
};

vec3 shadePixel(in vec3 eyePos, in vec3 ip, in vec3 N, in vec3 color)
{
	vec3 L = normalize(lightPosition - ip);
	float sp, dp = dot(L, N);					//sp = shadePixel, dp = diffusePixel
	if(dp < 0)
	{
		dp = 0;
		sp = 0;
	}
	else
	{
		vec3 V = normalize(eyePos - ip);
		//vec3 R = reflect(L, N);
		
		//sp = dot(V, R);
		if(sp < 0)
			sp = 0;
		sp = pow(sp, 16);
	}
	return dp * color + vec3(sp, sp, sp);
};

bool takeItem(out Ray r)
{
	int idx = atomicAdd(currentRayCount, -1);
	if(idx <= 0)
	{
		atomicAdd(currentRayCount, 1);
		return false;
	}
	r = currentRays[idx - 1];
	return true;
};

bool putItem(Ray r)
{
	int idx = atomicAdd(nextRayCount, 1);
	if(idx >= nextPassArraySize)
	{
		atomicAdd(nextRayCount, -1);	//buffer is full, discrard ray
		return false;
	}
	nextPassRays[idx] = r;
	return true;
};

vec3 computeRayColor(in vec3 rayStart, in vec3 rayDir, in ivec2 coords, in Ray r, inout float ret_refl)
{
	vec3 ip, N, color;
	float alpha, refl, closestT;
	
	if(!traceRay(rayStart, rayDir, ip, N, color, alpha, refl))
		return vec3(0, 0, 0);
	else
	{
		vec3 L = normalize(lightPosition - ip);
		vec3 ip_, N_, color_;
		float alpha_, refl_, closestT_;

		vec3 baseColor;
		if(!firstPass)
		{
			baseColor = r.accumulatedColor.xyz;
			refl = r.coords_percentageRemaining.z - refl;
		}
		else
		{
			if(!traceRay(ip + 0.01 * L, L, ip_, N_, color_, alpha_, refl_))
				baseColor = shadePixel(rayStart, ip, N, color);
			else
				baseColor = 0.1  * color;
		}

		ret_refl = refl;

		if(refl == 0.0 || lastPass)
		{
			
			return baseColor;
		}
			

		vec3 R = normalize(reflect(N, rayStart - ip));

		Ray newRay;
		newRay.start						= vec4(ip, 0);
		newRay.dir							= vec4(R, 0);
		newRay.coords_percentageRemaining	= vec4(coords, refl, 0);
		newRay.accumulatedColor				= vec4(baseColor * (1 - refl), alpha);
		//newRay.accumulatedColor = vec4(1,1,1,1);
		putItem(newRay);
		
		return baseColor;
	}
};

void raytrace(in ivec2 pixelCoord, in ivec2 picSize)
{
	vec3 rayDir, color;
	Ray r;
	float refl = 0;
	if(firstPass )//|| !(currentRays.length() > 0))
	{
		float d = 1.0 / 0.69974612;			//denom = tan(35 degrees) = field of viewfloat
		float dx = 2.0/(picSize.x-1);
		float dy = 2.0/(picSize.y-1);

		float y = -1.0 + pixelCoord.y * dy;
		float x = -1.0 + pixelCoord.x * dx;

		rayDir = normalize(x * cameraRight + y * cameraUp + d * cameraLook);
		color = computeRayColor(eyePos, rayDir, pixelCoord, r, refl);
	}
	else
	{
		if(!(currentRays.length() > 0))
			return;
		takeItem(r);

		color = computeRayColor(r.start.xyz, r.dir.xyz, pixelCoord, r, refl);
	}
	

	if(lastPass || refl == 0.0)
		imageStore(img, ivec3(pixelCoord,0), vec4(color, 1.0)); //Do this after lastPass of reflection
};

void main(){
	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 picSize = imageSize(img).xy;
	raytrace(pixelCoord, picSize);
}
